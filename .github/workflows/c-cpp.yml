name: Build and Release

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Visual Studio
      uses: microsoft/setup-msbuild@v1.3.1
      with:
        vs-version: '17.13.2'

    - name: Create Visual Studio Project
      shell: pwsh
      run: |
        
        mkdir AntiAFK-RBX
        cd AntiAFK-RBX
        
        
        @'
        <?xml version="1.0" encoding="utf-8"?>
        <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
          <ItemGroup Label="ProjectConfigurations">
            <ProjectConfiguration Include="Release|x64">
              <Configuration>Release</Configuration>
              <Platform>x64</Platform>
            </ProjectConfiguration>
          </ItemGroup>
          <PropertyGroup Label="Globals">
            <VCProjectVersion>16.0</VCProjectVersion>
            <ProjectGuid>{12345678-1234-1234-1234-123456789ABC}</ProjectGuid>
            <Keyword>Win32Proj</Keyword>
            <RootNamespace>AntiAFK-RBX</RootNamespace>
            <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
          </PropertyGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
            <ConfigurationType>Application</ConfigurationType>
            <UseDebugLibraries>false</UseDebugLibraries>
            <PlatformToolset>v143</PlatformToolset>
            <WholeProgramOptimization>true</WholeProgramOptimization>
            <CharacterSet>Unicode</CharacterSet>
          </PropertyGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
          <ImportGroup Label="ExtensionSettings">
          </ImportGroup>
          <ImportGroup Label="Shared">
          </ImportGroup>
          <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
            <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
          </ImportGroup>
          <PropertyGroup Label="UserMacros" />
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
            <LinkIncremental>false</LinkIncremental>
          </PropertyGroup>
          <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
            <ClCompile>
              <PrecompiledHeader>
              </PrecompiledHeader>
              <WarningLevel>Level3</WarningLevel>
              <FunctionLevelLinking>true</FunctionLevelLinking>
              <IntrinsicFunctions>true</IntrinsicFunctions>
              <SDLCheck>true</SDLCheck>
              <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
              <ConformanceMode>true</ConformanceMode>
              <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
              <Optimization>MinSpace</Optimization>
              <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
              <StringPooling>true</StringPooling>
              <ExceptionHandling>false</ExceptionHandling>
              <BufferSecurityCheck>false</BufferSecurityCheck>
            </ClCompile>
            <Link>
              <SubSystem>Windows</SubSystem>
              <EnableCOMDATFolding>true</EnableCOMDATFolding>
              <OptimizeReferences>true</OptimizeReferences>
              <GenerateDebugInformation>false</GenerateDebugInformation>
              <AdditionalDependencies>wininet.lib;dwmapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
            </Link>
          </ItemDefinitionGroup>
          <ItemGroup>
            <ClCompile Include="..\AntiAFK-RBX.cpp" />
          </ItemGroup>
          <ItemGroup>
            <ResourceCompile Include="..\resource.rc" />
          </ItemGroup>
          <ItemGroup>
            <ClInclude Include="..\resource.h" />
          </ItemGroup>
          <ItemGroup>
            <Image Include="..\logo.ico" />
          </ItemGroup>
          <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
          <ImportGroup Label="ExtensionTargets">
          </ImportGroup>
        </Project>
        '@ > AntiAFK-RBX.vcxproj
        
        
        @'
        Microsoft Visual Studio Solution File, Format Version 12.00
        # Visual Studio Version 17
        VisualStudioVersion = 17.13.2
        MinimumVisualStudioVersion = 10.0.40219.1
        Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "AntiAFK-RBX", "AntiAFK-RBX.vcxproj", "{12345678-1234-1234-1234-123456789ABC}"
        EndProject
        Global
          GlobalSection(SolutionConfigurationPlatforms) = preSolution
            Release|x64 = Release|x64
          EndGlobalSection
          GlobalSection(ProjectConfigurationPlatforms) = postSolution
            {12345678-1234-1234-1234-123456789ABC}.Release|x64.ActiveCfg = Release|x64
            {12345678-1234-1234-1234-123456789ABC}.Release|x64.Build.0 = Release|x64
          EndGlobalSection
          GlobalSection(SolutionProperties) = preSolution
            HideSolutionNode = FALSE
          EndGlobalSection
          GlobalSection(ExtensibilityGlobals) = postSolution
            SolutionGuid = {98765432-4321-4321-4321-987654321CBA}
          EndGlobalSection
        EndGlobal
        '@ > AntiAFK-RBX.sln

    - name: Build with MSBuild
      run: |
        cd AntiAFK-RBX
        msbuild AntiAFK-RBX.sln /p:Configuration=Release /p:Platform=x64 /p:RuntimeLibrary=MultiThreaded /p:WholeProgramOptimization=true /p:DebugInformationFormat=None /p:DebugType=None

    - name: Create UPX compressed version
      shell: pwsh
      run: |
        Copy-Item AntiAFK-RBX\x64\Release\AntiAFK-RBX.exe -Destination AntiAFK-RBX\x64\Release\AntiAFK-RBX-Original.exe

        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.0.2/upx-4.0.2-win64.zip" -OutFile "upx.zip"
        
        Expand-Archive -Path "upx.zip" -DestinationPath "upx_temp"
        
        $upxExe = Get-ChildItem -Path "upx_temp" -Recurse -Filter "upx.exe" | Select-Object -First 1 -ExpandProperty FullName
        Write-Host "UPX executable found at: $upxExe"
        
        Copy-Item AntiAFK-RBX\x64\Release\AntiAFK-RBX.exe -Destination AntiAFK-RBX\x64\Release\AntiAFK-RBX-UPX.exe

        & "$upxExe" --best --lzma "AntiAFK-RBX\x64\Release\AntiAFK-RBX-UPX.exe"

    - name: Set Release Tag
      id: release_date
      shell: pwsh
      run: |
        $today = Get-Date -Format "yyyy-MM-dd"
        $tag = "v$today"
        echo "date=$tag" >> $env:GITHUB_OUTPUT
        Write-Output "Using release tag: $tag"

    - name: Get latest stable release
      id: latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const stableRelease = releases.data.find(release => !release.prerelease);
          if (stableRelease) {
            console.log(`Latest stable release: ${stableRelease.tag_name}`);
            return stableRelease.html_url;
          } else {
            console.log('No stable release found');
            return '';
          }
        result-encoding: string

    - name: Delete previous pre-releases
      uses: actions/github-script@v6
      env:
        CURRENT_TAG: ${{ steps.release_date.outputs.date }}
      with:
        script: |
          const currentTag = process.env.CURRENT_TAG;
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          for (const release of releases.data) {
            if (release.prerelease) {
              console.log(`Found prerelease: ${release.tag_name}`);
              
              console.log(`Deleting prerelease: ${release.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
              });
              
              try {
                console.log(`Deleting tag: ${release.tag_name}`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`,
                });
              } catch (error) {
                console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
              }
            }
          }

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LATEST_RELEASE: ${{ steps.latest_release.outputs.result }}
      with:
        tag_name: ${{ steps.release_date.outputs.date }}
        release_name: Pre-release ${{ steps.release_date.outputs.date }}
        body: |
          ## ‚ö†Ô∏è This is a pre-release version of AntiAFK-RBX üöÄ
          
          This build is automatically generated from the latest code in the repository.
          It may contain experimental features or bugs. ‚ö†Ô∏è
          
          ### Files:
          - **AntiAFK-RBX-upx.exe** - UPX compressed version (smaller size)
          - **AntiAFK-RBX-Original.exe** - Original uncompressed version
          
          For the latest stable release, please visit:
          ${{ steps.latest_release.outputs.result }}
        draft: false
        prerelease: true

    - name: Upload UPX compressed version
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: AntiAFK-RBX/x64/Release/AntiAFK-RBX-upx.exe
        asset_name: AntiAFK-RBX-upx.exe
        asset_content_type: application/octet-stream

    - name: Upload original version
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: AntiAFK-RBX/x64/Release/AntiAFK-RBX-Original.exe
        asset_name: AntiAFK-RBX-Original.exe
        asset_content_type: application/octet-stream
